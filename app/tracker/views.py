import logging

from django.contrib import messages
from django.contrib.auth import authenticate, login, logout 
from django.contrib.auth.hashers import make_password
from django.contrib.auth.decorators import login_required
from django.core.exceptions import ObjectDoesNotExist
from django.core.mail import send_mail, mail_admins, BadHeaderError
from django.http import HttpResponse, HttpResponseBadRequest
from django.shortcuts import redirect, render

from scrapers.amazon_in import get_product_details

from .models import Product
from .forms import UserCreationForm

logger = logging.getLogger(__name__)

@login_required(login_url='/login/')
def index(request):
    if request.method == 'POST':
        post_data = request.POST
        url = post_data['inputURL']

        product_data = get_product_details(url)

        if 'error' in product_data:
            return HttpResponseBadRequest('Error parsing product site')
        
        new_product = Product(**product_data)
        new_product.save()

        return redirect('/products')

    return render(request, 'index.html')

def register_user(request):
    if request.method == 'POST':
        data = request.POST
        logger.warning(data)

        data = request.POST.copy()
        data._mutable = True
        data['password'] = make_password(request.POST['password'])

        form = UserCreationForm(data)

        if form.is_valid():
            try:
                send_mail(
                    subject='Email Verification for TrackItDown',
                    message='This is an autogenerated confirmation mail.',
                    from_email='support@trackitdown.com',
                    recipient_list=[data['email']]
                )

            except BadHeaderError:
                pass

            user = form.save()
            login(request, user)
            messages.success(request, 'Register success')
            
            return redirect('index')

    form = UserCreationForm()
    context = {'form': form}

    return render(request, 'registration/register.html', context)

def login_user(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']

        print(f'{username}:{password}')

        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect('index')

        logger.warning(user)

    return render(request, 'registration/login.html', context={})

@login_required(login_url='/login/')
def view_product(request, asin):
    try:
        product = Product.objects.filter(asin__contains=asin)
        return HttpResponse(product)

    except ObjectDoesNotExist:
        return HttpResponseBadRequest({'error': 'Wrong ASIN'})

@login_required(login_url='/login/')
def list_all_products(request):
    products_list = Product.objects.order_by('-added_at')

    return render(request, template_name='products_list.html', context={'list': products_list})

@login_required(login_url='/login/')
def delete_product(request, asin):
    product = Product.objects.get(asin=asin)
    if request.method == 'POST':
        product.delete()
        return redirect('product_list')

    return render(request, 'delete_product.html')
